//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MailCheck.Spf.Poller.Rules {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class SpfRulesMarkdownResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SpfRulesMarkdownResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MailCheck.Spf.Poller.Rules.SpfRulesMarkdownResource", typeof(SpfRulesMarkdownResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string AllMustBeLastMechanismErrorMessage {
            get {
                return ResourceManager.GetString("AllMustBeLastMechanismErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///#### Why is there a DNS lookup limit?
        ///
        ///As part of evaluating whether an email message passes SPF authentication, a receiving mail server may have to make one or more DNS lookups. An example of a basic SPF record to be added to an organisation&apos;s public DNS where it uses Google would look like this:
        ///
        ///```v=spf1 include:_spf.google.com ~all```
        ///
        ///The SPF protocol has some built-in protection – it protects receiving mail servers from **denial of service attacks** by limiting the number of domain lookups to 10. Ho [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CloseTo10QueryLookupsErrorMessage {
            get {
                return ResourceManager.GetString("CloseTo10QueryLookupsErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PTR mechanism is no longer in use as it is insecure, use a different mechanism.
        ///
        ///Reverse DNS entries can&apos;t be trusted as the IP address owner can put anything in the record
        ///The result can only be trusted if the forward and reverse results match.
        ///
        ///[RFC 7208 Section 5.5](https://tools.ietf.org/html/rfc7208#section-5.5).
        /// </summary>
        public static string DontUsePtrMechanismErrorMessage {
            get {
                return ResourceManager.GetString("DontUsePtrMechanismErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string ExplanationDoesntOccurMoreThanOnceErrorMessage {
            get {
                return ResourceManager.GetString("ExplanationDoesntOccurMoreThanOnceErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string ModifiersOccurAfterMechanismsErrorMessage {
            get {
                return ResourceManager.GetString("ModifiersOccurAfterMechanismsErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string OnlyOneSpfRecordErrorMessage {
            get {
                return ResourceManager.GetString("OnlyOneSpfRecordErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///#### Why is there a DNS lookup limit?
        ///
        ///As part of evaluating whether an email message passes SPF authentication, a receiving mail server may have to make one or more DNS lookups. An example of a basic SPF record to be added to an organisation&apos;s public DNS where it uses Google would look like this:
        ///
        ///```v=spf1 include:_spf.google.com ~all```
        ///
        ///The SPF protocol has some built-in protection – it protects receiving mail servers from **denial of service attacks** by limiting the number of domain lookups to 10. Ho [rest of string was truncated]&quot;;.
        /// </summary>
        public static string QueryLookupsInfoMessage {
            get {
                return ResourceManager.GetString("QueryLookupsInfoMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string RedirectDoesntOccurMoreThanOnceErrorMessage {
            get {
                return ResourceManager.GetString("RedirectDoesntOccurMoreThanOnceErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        public static string RedirectModifierAndAllMechanismNotValidErrorMessage {
            get {
                return ResourceManager.GetString("RedirectModifierAndAllMechanismNotValidErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The 450 bytes is the total of all of the TXT records configured on this domain, including those which are not used for SPF. 
        ///            From [RFC 7208 Section 3.4](https://tools.ietf.org/html/rfc7208#section-3.4):
        ///            
        ///            &quot;If the size of the DNS message, the combined length of the DNS name and the text of all the records 
        ///            of a given type is under 450 octets, then DNS answers ought to fit in UDP packets.&quot;
        ///    
        ///[View your full result using google DNS toolkit](https://toolbox.goog [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ShouldBeSmallEnoughForUdp {
            get {
                return ResourceManager.GetString("ShouldBeSmallEnoughForUdp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///You may consider:
        ///
        ///- moving some senders onto separate subdomains to split your senders.
        ///- using a different mechanism instead of mx or a
        ///
        ///#### Why is there a DNS lookup limit?
        ///
        ///As part of evaluating whether an email message passes SPF authentication, a receiving mail server may have to make one or more DNS lookups. An example of a basic SPF record to be added to an organisation&apos;s public DNS where it uses Google would look like this:
        ///
        ///```v=spf1 include:_spf.google.com ~all```
        ///
        ///The SPF protocol has some bui [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ShouldNotHaveMoreThan10QueryLookupsErrorMessage {
            get {
                return ResourceManager.GetString("ShouldNotHaveMoreThan10QueryLookupsErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///#### Description 
        ///Using mx can easily cause the number of DNS lookups to breach the lookup limit causing a failure of SPF. Providers will not be expecting people to use this method so may implement breaking changes outside of your control like adding an 11th mail server so it can break after working for some time. The MX mechanism uses one of your 10 DNS lookups to retrieve the MX records for your domain. It also has its own limit of 10 lookups.
        ///
        ///#### Impact
        ///Your entire SPF configuration will fail if the l [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ShouldNotUseMxInfoMessage {
            get {
                return ResourceManager.GetString("ShouldNotUseMxInfoMessage", resourceCulture);
            }
        }
    }
}
