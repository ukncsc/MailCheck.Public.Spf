<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllMustBeLastMechanismErrorMessage" xml:space="preserve">
    <value />
  </data>
  <data name="DontUsePtrMechanismErrorMessage" xml:space="preserve">
    <value>The PTR mechanism is no longer in use as it is insecure, use a different mechanism.

Reverse DNS entries can't be trusted as the IP address owner can put anything in the record
The result can only be trusted if the forward and reverse results match.

[RFC 7208 Section 5.5](https://tools.ietf.org/html/rfc7208#section-5.5)</value>
  </data>
  <data name="ExplanationDoesntOccurMoreThanOnceErrorMessage" xml:space="preserve">
    <value />
  </data>
  <data name="ModifiersOccurAfterMechanismsErrorMessage" xml:space="preserve">
    <value />
  </data>
  <data name="OnlyOneSpfRecordErrorMessage" xml:space="preserve">
    <value />
  </data>
  <data name="RedirectDoesntOccurMoreThanOnceErrorMessage" xml:space="preserve">
    <value />
  </data>
  <data name="RedirectModifierAndAllMechanismNotValidErrorMessage" xml:space="preserve">
    <value />
  </data>
  <data name="ShouldBeSmallEnoughForUdp" xml:space="preserve">
    <value>The 450 bytes is the total of all of the TXT records configured on this domain, including those which are not used for SPF. 
            From [RFC 7208 Section 3.4](https://tools.ietf.org/html/rfc7208#section-3.4):
            
            "If the size of the DNS message, the combined length of the DNS name and the text of all the records 
            of a given type is under 450 octets, then DNS answers ought to fit in UDP packets."
    
[View your full result using google DNS toolkit](https://toolbox.googleapps.com/apps/dig/#TXT/{0})

Generally domain authentication entries for cloud services require a temporary TXT record to prove domain ownership, you should remove these once complete.

You may consider:

- moving some senders onto separate subdomains to split your senders.
- moving some senders into a different TXT record and referring to it using the include tag, but be aware the maximum number of lookups is 10.</value>
  </data>
  <data name="ShouldNotHaveMoreThan10QueryLookupsErrorMessage" xml:space="preserve">
    <value>You may consider:

- moving some senders onto separate subdomains to split your senders.
- using a different mechanism instead of mx or a</value>
  </data>
   <data name="CloseTo10QueryLookupsErrorMessage" xml:space="preserve">
    <value />
  </data>
  <data name="QueryLookupsInfoMessage" xml:space="preserve">
    <value />
  </data>


  <data name="ShouldNotUseMxInfoMessage" xml:space="preserve">
    <value>
#### Description 
Using mx can easily cause the number of DNS lookups to breach the lookup limit causing a failure of SPF. Providers will not be expecting people to use this method so may implement breaking changes outside of your control like adding an 11th mail server so it can break after working for some time. The MX mechanism uses one of your 10 DNS lookups to retrieve the MX records for your domain. It also has its own limit of 10 lookups.

#### Impact
Your entire SPF configuration will fail if the limits are exceeded. If the domain has a policy of reject then all emails not signed by DKIM will be lost.

#### Reference
Implementations MUST limit the total number of those terms to 10 during SPF evaluation, to avoid unreasonable load on the DNS. If this limit is exceeded, the implementation MUST return "permerror".

When evaluating the "mx" mechanism, the number of "MX" resource records queried is included in the overall limit of 10 mechanisms/modifiers that cause DNS lookups as described above. In addition to that limit, the evaluation of each "MX" record MUST NOT result in querying more than 10 address records - either "A" or "AAAA" resource records.  If this limit is exceeded, the "mx" mechanism MUST produce a "permerror" result.

#### Fix
Use the include mechanism to reference an SPF record managed by your provider, or use ip4/6 for on prem.
</value>
  </data>

</root>